nicoll_beam_0 = {
    entity = "giga_consite_7_7_entity"
    construction_entity = "giga_consite_7_7_entity"
    portrait = "GFX_megastructure_construction_background"
    place_entity_on_planet_plane = no
    ai_weight = {
        factor = 0
    }
    prerequisites = {
        giga_tech_ndb_1
    }
    build_time = 1800
    resources = {
        category = megastructures
        cost = {
            alloys = 12500
            influence = 500
        }
        upkeep = {
            energy = 10
        }
    }
    potential = {
        has_ascension_perk = ap_gigastructural_constructs
        has_technology = giga_tech_ndb_1
        NOR = {
            has_global_flag = ndb_disabled
            has_megastructure = nicoll_beam_0
            has_megastructure = nicoll_beam_1
            has_megastructure = nicoll_beam_2
            has_megastructure = nicoll_beam_3
            has_megastructure = nicoll_beam_4
            has_megastructure = nicoll_beam_cooldown
            has_megastructure = nicoll_beam_firing
            has_megastructure = nicoll_beam_menu
            has_megastructure = nicoll_beam_ready
            has_megastructure = nicoll_beam_recharge_after_barren
            has_megastructure = nicoll_beam_recharge_after_crack
            has_megastructure = nicoll_beam_recharge_after_damage
            has_megastructure = nicoll_beam_recharge_after_melt
            has_megastructure = nicoll_beam_recharge_after_system
            has_megastructure = nicoll_beam_targetting
        }
    }
    possible = {
        custom_tooltip = {
            fail_text = "requires_no_binary_trinary"
            giga_is_bitrinary = no
        }
        custom_tooltip = {
            fail_text = "requires_inside_border"
            is_inside_border = from
        }
        custom_tooltip = {
            fail_text = "requires_surveyed_system"
            NOT = {
                any_system_planet = {
                    is_surveyed = {
                        who = prev.from
                        status = no
                    }
                }
            }
        }
        custom_tooltip = {
            fail_text = "requires_no_colonized_planets"
            NOT = {
                any_system_planet = {
                    is_colony = yes
                }
            }
        }
        custom_tooltip = {
            fail_text = "requires_big_star"
            OR = {
                is_star_class = sc_b
                is_star_class = sc_a
            }
        }
        custom_tooltip = {
            fail_text = "requires_no_existing_megastructure"
            has_no_non_gate_megastructure = yes
        }
        custom_tooltip = {
            fail_text = "requires_no_crisis_system"
            NOT = {
                any_system_planet = {
                    has_planet_flag = crisis_vital_planet
                }
            }
        }
    }
    placement_rules = {
        planet_possible = {
            custom_tooltip = {
                fail_text = "requires_no_existing_megastructure"
                planet_has_no_megastructure = yes
            }
            custom_tooltip = {
                fail_text = "must_build_around_star"
                is_star = yes
            }
            custom_tooltip = {
                fail_text = "requires_no_anomaly"
                has_anomaly = no
            }
        }
    }
    on_build_complete = {
        save_event_target_as = giga_system
        fromfrom.planet = {
            save_event_target_as = giga_planet
            if = {
                limit = {
                    exists = orbital_station
                }
                orbital_station = {
                    dismantle = yes
                }
            }
            set_planet_flag = megastructure
            set_planet_flag = has_megastructure
            set_planet_flag = cant_build_here
            set_planet_flag = cant_target_this_planet
        }
        every_system_planet = {
            set_planet_flag = cant_build_here
            set_planet_flag = cant_target_this_planet
        }
        from = {
            set_country_flag = giga_has_a_ndb
            country_event = {
                id = giga_dialog.3201
            }
            change_variable = {
                which = giga_current_ndb
                value = 1
            }
        }
    }
}
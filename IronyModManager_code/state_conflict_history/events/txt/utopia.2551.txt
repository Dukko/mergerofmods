namespace = action
namespace = utopia
country_event = {
    id = utopia.2551
    title = "utopia.2551.name"
    desc = "utopia.2551.desc"
    picture = GFX_evt_robot_assembly_plant
    show_sound = event_synthetic_evolution
    is_triggered_only = yes
    immediate = {
        set_country_flag = synthetic_empire
        if = {
            limit = {
                has_policy_flag = robots_outlawed
            }
            set_policy = {
                policy = robot_pop_policy
                option = robot_pops_allowed
                cooldown = yes
            }
        }
        if = {
            limit = {
                OR = {
                    has_policy_flag = ai_servitude
                    has_policy_flag = ai_outlawed
                }
            }
            set_policy = {
                policy = artificial_intelligence_policy
                option = ai_full_rights
                cooldown = yes
            }
        }
        if = {
            limit = {
                OR = {
                    is_active_resolution = "resolution_divinity_silence_the_soulless"
                    is_active_resolution = "resolution_divinity_a_defined_purpose"
                }
            }
            owner = {
                set_timed_country_flag = {
                    flag = resolution_breached_synthetic_evolution
                    days = 3600
                }
            }
        }
        give_technology = {
            tech = tech_bio_reactor
            message = no
        }
        create_species = {
            is_mod = yes
            name = this
            namelist = this
            plural = this
            class = "ROBOT"
            portrait = "default_robot"
            traits = {
                trait = "trait_mechanical"
            }
            effect = {
                if = {
                    limit = {
                        host_has_dlc = "Synthetic Dawn Story Pack"
                    }
                    prev = {
                        switch = {
                            trigger = is_species_class
                            HUM = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_hum_robot"
                                    }
                                }
                            }
                            MAM = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_mam_robot"
                                    }
                                }
                            }
                            REP = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_rep_robot"
                                    }
                                }
                            }
                            AVI = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_avi_robot"
                                    }
                                }
                            }
                            ART = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_art_robot"
                                    }
                                }
                            }
                            MOL = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_mol_robot"
                                    }
                                }
                            }
                            FUN = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_fun_robot"
                                    }
                                }
                            }
                            PLANT = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "sd_pla_robot"
                                    }
                                }
                            }
                            LITHOID = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "lith_machine"
                                    }
                                }
                            }
                            NECROID = {
                                prev = {
                                    change_species_characteristics = {
                                        portrait = "nec_machine"
                                    }
                                }
                            }
                        }
                    }
                }
                rename_species = {
                    prompt_country = root
                    name_list = ascension_list
                }
                save_event_target_as = new_robotic_species
            }
        }
        every_owned_pop = {
            limit = {
                species = {
                    has_trait = trait_cybernetic
                }
            }
            change_species = event_target:new_robotic_species
        }
        every_owned_ship = {
            limit = {
                is_ship_class = shipclass_colonizer
                species = {
                    has_trait = trait_cybernetic
                }
            }
            change_species = event_target:new_robotic_species
        }
        every_owned_army = {
            limit = {
                exists = species
                exists = planet
                species = {
                    has_trait = trait_cybernetic
                }
                army_type = assault_army
            }
            modify_army = {
                name = random
                type = "robotic_army"
                species = event_target:new_robotic_species
            }
        }
        every_owned_army = {
            limit = {
                exists = species
                exists = planet
                species = {
                    has_trait = trait_cybernetic
                }
                army_type = defense_army
            }
            modify_army = {
                name = random
                type = "robotic_defense_army"
                species = event_target:new_robotic_species
            }
        }
        every_owned_leader = {
            limit = {
                OR = {
                    has_trait = leader_trait_admiral_cyborg
                    has_trait = leader_trait_general_cyborg
                    has_trait = leader_trait_governor_cyborg
                    has_trait = leader_trait_scientist_cyborg
                    has_trait = leader_trait_ruler_cyborg
                    has_trait = leader_trait_admiral_synthetic
                    has_trait = leader_trait_ruler_synthetic
                    has_trait = leader_trait_general_synthetic
                    has_trait = leader_trait_governor_synthetic
                    has_trait = leader_trait_scientist_synthetic
                }
            }
            change_species = event_target:new_robotic_species
            change_leader_portrait = species
        }
        every_pool_leader = {
            limit = {
                OR = {
                    has_trait = leader_trait_admiral_cyborg
                    has_trait = leader_trait_general_cyborg
                    has_trait = leader_trait_governor_cyborg
                    has_trait = leader_trait_scientist_cyborg
                    has_trait = leader_trait_ruler_cyborg
                    has_trait = leader_trait_admiral_synthetic
                    has_trait = leader_trait_ruler_synthetic
                    has_trait = leader_trait_general_synthetic
                    has_trait = leader_trait_governor_synthetic
                    has_trait = leader_trait_scientist_synthetic
                }
            }
            change_species = event_target:new_robotic_species
            change_leader_portrait = species
        }
        change_dominant_species = {
            species = event_target:new_robotic_species
        }
        every_owned_leader = {
            limit = {
                species = {
                    has_trait = trait_mechanical
                }
                NOR = {
                    has_trait = leader_trait_admiral_synthetic
                    has_trait = leader_trait_general_synthetic
                    has_trait = leader_trait_governor_synthetic
                    has_trait = leader_trait_scientist_synthetic
                    has_trait = leader_trait_ruler_synthetic
                }
            }
            switch = {
                trigger = leader_class
                admiral = {
                    add_trait = leader_trait_admiral_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_admiral_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                general = {
                    add_trait = leader_trait_general_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_general_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                governor = {
                    add_trait = leader_trait_governor_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_governor_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                scientist = {
                    add_trait = leader_trait_scientist_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_scientist_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                ruler = {
                    add_trait = leader_trait_ruler_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_ruler_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
            }
        }
        every_pool_leader = {
            limit = {
                species = {
                    has_trait = trait_mechanical
                }
                NOR = {
                    has_trait = leader_trait_admiral_synthetic
                    has_trait = leader_trait_general_synthetic
                    has_trait = leader_trait_governor_synthetic
                    has_trait = leader_trait_scientist_synthetic
                    has_trait = leader_trait_ruler_synthetic
                }
            }
            switch = {
                trigger = leader_class
                admiral = {
                    add_trait = leader_trait_admiral_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_admiral_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                general = {
                    add_trait = leader_trait_general_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_general_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                governor = {
                    add_trait = leader_trait_governor_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_governor_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                scientist = {
                    add_trait = leader_trait_scientist_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_scientist_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
                ruler = {
                    add_trait = leader_trait_ruler_synthetic
                    add_ruler_trait = leader_trait_ruler_synthetic
                    remove_trait = leader_trait_ruler_cyborg
                    remove_ruler_trait = leader_trait_ruler_cyborg
                }
            }
        }
        observer_event = {
            id = observer.4
        }
        every_country = {
            limit = {
                is_ai = no
                NOT = {
                    is_same_value = root
                }
                has_communications = root
            }
            country_event = {
                id = utopia.2555
                days = 5
            }
            country_event = {
                id = utopia.2556
                days = 10
            }
        }
        if = {
            limit = {
                any_country = {
                    OR = {
                        is_country_type = fallen_empire
                        is_country_type = awakened_fallen_empire
                    }
                    has_ethic = ethic_fanatic_spiritualist
                    has_communications = root
                    NOT = {
                        is_same_value = root
                    }
                }
            }
            random_country = {
                limit = {
                    OR = {
                        is_country_type = fallen_empire
                        is_country_type = awakened_fallen_empire
                    }
                    has_ethic = ethic_fanatic_spiritualist
                    has_communications = root
                    NOT = {
                        is_same_value = root
                    }
                }
                country_event = {
                    id = utopia.2557
                    days = 15
                }
            }
        }
        else = {
            random_country = {
                limit = {
                    is_country_type = default
                    has_ethic = ethic_fanatic_spiritualist
                    has_communications = root
                    NOT = {
                        is_same_value = root
                    }
                }
                country_event = {
                    id = utopia.2557
                    days = 15
                }
            }
        }
        ROOT = {
            set_country_flag = synthetic_age
        }
    }
    option = {
        name = "utopia.2551.a"
        custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
    }
}